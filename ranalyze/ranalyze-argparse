#!/usr/bin/env python
from argparse import (ArgumentParser, FileType)
import datetime
from itertools import chain
from re import match


DATE_REGEX = r"^\d{4}-\d{2}-\d{2}$"
SUBREDDIT_SANITIZE_REGEX = r"^(?:\/?r?\/?)([^\/]*)\/?$"


INVALID_DATE_ERROR = "{} is not a valid date"
INVALID_DATE_FORMAT_ERROR = ("{} is not a valid date format. "
                             "Proper format is YYYY-MM-DD")
MISSING_SUBREDDIT_ERROR = ("at least one subreddit specifier "
                           "(-i or -s) is required")


def parse_args():
    """
    Parse command line arguments. Generates a set of subreddits to analyze, an
    inclusive date range, and an output file.

    All arguments are validated. Errors may be raised for:
    - Invalid Date Format (e.g. 9/4/2016)
    - Invalid Date (e.g. 2/30/2016)
    - Missing -a or --after argument
    - Non-existent input file
    - No specified subreddits
    - No write permission for output file

    Subreddits are sanitized to remove extraneous characters:
    - leading path information (i.e. /, r/, /r/)
    - trailing slashes

    Subreddits are returned as a set of strings
    Date range is returned as a tuple of datetime.date objects
    Output filename is returned as a string

    :return: set of subreddits, date range (after, before), output filename
    :rtype: set, tuple, str
    """

    # Groups of command line arguments. In the format:
    # {group_name: group}
    # group: {flags: options}

    arg_groups = {
        "date range": {
            ("-a", "--after"): {
                "help": "only analyze posts on or after this date",
                "required": True,
                "type": str
            },
            ("-b", "--before"): {
                "help": ("only analyze posts on or before "
                         "this date, defaults to today"),
                "default": datetime.date.today().isoformat(),
                "type": str
            }
        },
        "subreddit selection": {
            ("-i", "--input-file"): {
                "action": "append",
                "help": ("name of file containing space-delimited "
                         "list of subreddits to analyze"),
                "nargs": "+",
                "type": FileType()
            },
            ("-s", "--subreddit"): {
                "action": "append",
                "help": ("subreddit to analyze, may be a single value, "
                         "or a space-delimited list"),
                "nargs": "+",
                "type": str
            }
        },
        "output": {
            ("-o", "--output-file"): {
                "help": ("analysis data will be written "
                         "to this file (must be *.xlsx)"),
                "required": True,
                "type": FileType(mode='w')
            }
        }
    }

    def validate_date(date_str):
        """
        Validate format of the date string, and convert to datetime.date object

        Raises an error if:
        - date_str is in an invalid format
        - date_str represents an invalid date

        :param date_str: ISO 8601 formatted date, specifically YYYY-MM-DD
        :return: converted datetime.date object
        :rtype: datetime.date
        """
        if match(DATE_REGEX, date_str) is None:
            parser.error(INVALID_DATE_FORMAT_ERROR.format(date_str))
        try:
            date = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()
        except ValueError:
            parser.error(INVALID_DATE_ERROR.format(date_str))
        return date

    parser = ArgumentParser()

    # Add the arguments to the parser

    for group_name, args in arg_groups.items():
        group = parser.add_argument_group(group_name)
        for flags, options in args.items():
            group.add_argument(*flags, **options)

    args = parser.parse_args()

    # Validate date arguments and convert to datetime.date

    date_range = tuple(validate_date(arg) for arg in (args.after, args.before))

    # At least one of -s or -i is required

    if args.input_file is None and args.subreddit is None:
        parser.error(MISSING_SUBREDDIT_ERROR)

    # Parse subreddit set

    subreddits = set()

    if args.input_file is not None:
        for file in chain(*args.input_file):
            file_contents = file.read()
            if file_contents.endswith("\n"):
                file_contents = file_contents[:-1]
            file_set = file_contents.split(" ")
            subreddits.update(tuple(file_set))

    if args.subreddit is not None:
        args.subreddit = chain(*args.subreddit)  # flatten 2d subreddit list
        subreddits.update(tuple(args.subreddit))

    # Sanitize subreddit names

    sanitized_subreddits = set(match(SUBREDDIT_SANITIZE_REGEX, sub).group(1)
                               for sub in subreddits)

    return sanitized_subreddits, date_range, args.output_file.name

if __name__ == "__main__":
    print(parse_args())